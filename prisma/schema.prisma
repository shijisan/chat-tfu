generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int        @id @default(autoincrement())
  username            String     @unique
  email               String     @unique
  password            String
  salt                String
  encryptedKey        String
  createdAt           DateTime   @default(now())
  contacts            Contact[]  @relation(name: "UserContacts")
  friends             Contact[]  @relation(name: "FriendContacts")
  reactions           Reaction[]
  messages            Message[]
  meetings            Meeting[]  @relation("UserMeetings")
}

model Contact {
  id               Int        @id @default(autoincrement())
  userId           Int
  friendId         Int
  user             User       @relation(name: "UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  friend           User       @relation(name: "FriendContacts", fields: [friendId], references: [id], onDelete: Cascade)
  messages         Message[]  @relation(name: "ContactMessages")
  isFriend         Boolean    @default(false)
  blocked          Boolean    @default(false)
  sharedUserKey    String
  sharedContactKey String
  reactions        Reaction[] @relation(name: "ContactReacts")

  @@unique([userId, friendId])
}

model Message {
  id        Int        @id @default(autoincrement())
  contactId Int
  senderId  Int
  contact   Contact    @relation(name: "ContactMessages", fields: [contactId], references: [id], onDelete: Cascade)
  sender    User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  reactions Reaction[] @relation(name: "MessageReacts")
  updatedAt DateTime   @default(now())

  @@index([contactId])
  @@index([senderId])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  emoji     String
  message   Message  @relation(name: "MessageReacts", fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId Int
  contact   Contact  @relation(name: "ContactReacts", fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([messageId, userId])
}

model Meeting {
  id           Int       @id @default(autoincrement())
  meetId       String    @unique
  hostId       Int
  host         User      @relation("UserMeetings", fields: [hostId], references: [id], onDelete: Cascade)
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  endedAt      DateTime?
  participants String[]  @default([])
  @@index([meetId])
}